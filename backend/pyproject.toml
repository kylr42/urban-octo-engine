[tool.poetry]
name = "urban-octo-engine"
version = "0.1.0"
description = ""
authors = ["zhabdisattarov <zhabdisattarov@nurtelecom.kg>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
django = "^4.2.7"
python-dotenv = "^1.0.0"
django-environ = "^0.11.2"
djangorestframework = "^3.14.0"
psycopg2-binary = "^2.9.9"
gunicorn = "^21.2.0"

[tool.poetry.group.dev.dependencies]
black = "^24.2.0"
pyright = "^1.1.350"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    "*/__init__.py",
    "*/schema/*",
    "*/tests/*",
    "*/apps.py",
    "*/router.py",
    "*/schemas.py",
    "*/migrations/*",
    "*/config/*",
    "*/replen_optimizer/tasks.py",
    "*/general/management/*",
    "*/exceptions/*",
    "*/calculators/*",
    ".gitignore",
    "*.env*",
    "*/.gitlab*",
    "*/Dockerfile",
    "*/alembic*",
    "*/requirements.txt",
    "*/docker-*",
    "*/README*",
    "*/CHANGELOG.md",
    "*/replen_optimizer/services/replenishment_*",
    "*/record_postprocessing.py",
    "*/migrations/"
]

line-length = 90
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
# Rules for ruff here --> https://docs.astral.sh/ruff/rules/
select = ["E", "F", "W", "D"]  # Default + iSort + Pydocstyle

# Skip unused variable rules
# Excluded as unsupported "E121", "E123", "E126", "E127", "W503", "W504"
ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105",
    "D106", "D107", "D200", "D204", "D205", "D400",
    "E731", "E722", "F821", "E402", "F405", "F403",
    "D208", "E203",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F405"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"  # Accepts: "google", "numpy", or "pep257".

[tool.ruff.lint.pycodestyle]
max-line-length = 120 # Настройка длины из flake8 setup.cfg

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true

default_section = "THIRDPARTY"
known_first_party = ["config"]
known_django = ["django", "rest_framework", "drf_spectacular", "wsgiref"]

sections = [
    "FUTURE",
    "STDLIB",
    "FIRSTPARTY",
    "DJANGO",
    "THIRDPARTY",
    "LOCALFOLDER",
]

skip_glob = ["*/migrations/*", "*/alembic/*", "*/asgi.py"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"